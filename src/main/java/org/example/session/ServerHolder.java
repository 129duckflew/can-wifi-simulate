package org.example.session;

import jakarta.annotation.PostConstruct;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.example.processor.CanWifiProcessor;
import org.example.protocol.CanWifiProtocol;
import org.smartboot.socket.transport.AioQuickServer;
import org.smartboot.socket.transport.AioSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.AutoConfigureOrder;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.StructuredTaskScope;

@Component
@Slf4j
public class ServerHolder {

    public static byte[] serverData = {
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0C, 0x00, (byte) 0x80, (byte) 0xF7, 0x00, 0x33, 0x00, 0x00, 0x05, 0x0A, (byte) 0xE7, (byte) 0xA4,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x08, 0x00, 0x00, 0x07, (byte) 0xD0, (byte) 0xA0, (byte) 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xE5, 0x0B, (byte) 0xE7, (byte) 0xC5,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x07, 0x00, 0x00, 0x07, (byte) 0xD0, (byte) 0xA0, (byte) 0xA1, 0x0B, 0x62, 0x62, 0x08, 0x40, 0x00, (byte) 0xD9, 0x0D, (byte) 0xE7, (byte) 0xA2,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x07, (byte) 0xD0, (byte) 0xA0, (byte) 0xA2, 0x00, 0x00, (byte) 0xE4, 0x46, 0x00, 0x00, (byte) 0xCD, 0x0F, (byte) 0xE7, 0x57,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x07, 0x00, 0x00, 0x07, (byte) 0xD0, (byte) 0xA0, (byte) 0xA4, 0x00, 0x00, 0x00, 0x63, (byte) 0x87, 0x00, (byte) 0xB5, 0x13, (byte) 0xE7, 0x72,
            (byte) 0xFE, (byte) 0xFD, 0x00, (byte) 0x88, 0x00, 0x00, 0x27, (byte) 0xFF, 0x01, (byte) 0xE0, 0x00, 0x00, 0x01, 0x0E, 0x64, 0x00, 0x2B, 0x16, (byte) 0xE7, 0x03,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x07, 0x00, 0x00, 0x07, (byte) 0xD0, (byte) 0xA0, (byte) 0xB8, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9D, 0x17, (byte) 0xE7, 0x26,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
            (byte) 0xFE, (byte) 0xFD, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x61, (byte) 0xFF, 0x00, (byte) 0xB2, 0x00, 0x00, 0x15, 0x18, (byte) 0xE7, (byte) 0xCA,
    };
    @Scheduled(cron = "* * * * * ?")
    public void sendCan(){
        log.info("session size={}",SessionHolder.sessionList.size());
        try (var scope = Executors.newFixedThreadPool(4)) {
            for (AioSession aioSession : SessionHolder.sessionList) {
                scope.submit(()-> {
                    try {
                        aioSession.writeBuffer().writeAndFlush(serverData);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
            }
        }
    }
    @Autowired
    CanWifiProcessor processor;
    @PostConstruct
    public void init() throws IOException {
        AioQuickServer server=new AioQuickServer("0.0.0.0",10080,new CanWifiProtocol(),processor);
        server.start();
    }
}
